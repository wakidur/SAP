// 10-06-2018
content (সন্তোষ, পরিমাণ, বিষয়বস্তু)
exports(রপ্তানির)
export(রপ্তানি করা)
Transforming(রূপান্তর
bootstrap(বুটস্ট্র্যাপ)

1. Angular Elements Overview

Angular elements are Angular components packaged as custom elements, a web standard for defining new HTML elements in a framework-agnostic way. 

Custom Elements are Web Platform feature currently supported by Chrome, Opera, and Safari, and available in other browsers through polyfills . 

A custom element extends HTML by allowing you to define a tag whose content  is created and controlled by JavaScript code. 

The browser maintains a " CustomElementRegistery " of defined custom elements(also called Web Components ), which maps an instantiable  JavaScript class to an HTML tag. 

The @angular/elements package exports a " createCustomElement() " API that provides a bridge from Angular's component interface and change detection functionality to the built-in DOM API.

Transforming a component to a custom element makes all of the required Angular infrastructure available to the browser. Creating a custom element is simple and straightforward, and automatically connects your component-defined view with change detection and data binding mapping Angular functionality to the corresponding native HTML equivalents.



// 12-06-2018 ---------------

2. Using custom element
	Custom elements bootstrap themselves- they start automatically when they are added to the DOM, and are automatically destroyed when removed from the DOM. Once a custom element is added to the DOM for any page, it looks and behaves like any other HTML element, and does not required any special knowledge of Angular terms or usage conventions.
	
	2.1 Easy dynamic content in an Angular app.
		Transforming a component to a custom element provides an easy path to creating dynamic HTML content in your Angular App. 
	2.2 Content-rich applications 
		If you have a content-rich app, such as the Angular app that presents this documentation, custom elements let you give your content providers sophisticated Angular functionality without requiring knowledge of Angular.
	


// 13-06-2018 ---------------

3. How it works

	Use the " createCustomElement() " function to convert a component into a class that can be registered with he browser as a custom element. After you can use the new element just like a bulit-in HTML element in content that you add directly into DOM.

//24-06-2018------------

<my-popup message="Use Angular!"></my-popup>

When your custom element is placed on a page, the browser creates an instance of the registered class an adds it to the DOM. The content is provided by the component's template, which uses Angular template syntex, and rendered using the component and DOM data. Input properties in the component correspond to input attributes for the element.

4. Transforming components to custom elements

	
// 26-06-2018 ----------------
5. Mapping 
