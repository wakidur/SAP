// 27-05-2018
// 28-05-2018
1. Lifecycle Hooks
A component has a lifecycle managed by Angular.
Angular create it, renders it, creates and renders its children, checkes it when its data-bound(বাধ্য, নিবন্ধিত) properties change, and destroys(ধ্বংস) it berfor removing it from the DOM. 

2. Component lifecycle hooks overview
    Directive and component instances have a lifecycle as Angular creates, updates, and destroys them. Developers can tab(টোকা দেত্তয়া) into key moments in that lifecycle by implementing (বাস্তবায়ন করে) one or more of the lifecycle hook interfaces in the Angular core library.


3. Lifecycle sequence
    After creating a component/directive by calling its constructor, Angular calls the lifecycle hook methods in the following sequence at specific moments.

    1. ngOnChange() : Respond when Angular(rs) sets data-bound input properties. The method receives a SimpleChanges object of current and previous property values. called befor ngOnInit() and whenever one or more data-bound imput properties change. 

    2. ngOnInit(): initialize(আরম্ভ) the directive/component after Angular first displays the data-bound properties and sets the directive/component's input propeties. called once, after the first ngOnChange().

    3. ngDoCheck(): Detect(সন্ধান করে বার করা) and act(কাজ) upon(উপরে) changes that Angular can't or won't detact on its own. Called during every change detection run, immediately after ngOnChanges() and ngOnInit(). 

    4. ngAfterContentInit(): Respond  after Angular projects external content into the component's view / the view that a directive is in. called once after the first ngDoCheck(). 

    5. ngAfterContentChecked(): Respond after Angular checks the content projected(অভিক্ষিপ্ত) into the directive/component. Called after the ngAfterContenInit() and every subsequent ngDoCheck(). 

    6. ngAfterViewInit(): Respond after Angular initializes the component's views and child views/ the view that a directive is in. Called once after the first ngAfterContentChecked().

    7. ngAfterViewChecke(): Respond after Angular checks the component's views and child views/ the view that a directive is in. 
    Called after the ngAfterViewInit and every subsequent ngAfterContentChecked()

    8. ngOnDestroy(): Cleanup just before Angular destroys the directive/component. Unsubscribe Observables and detach event handlers to avoid memory leaks. 
    called just berfor Angular destroys the directive/component. 

4. Interfaces are optional (technically)

    The interfaces are optional(ঐচ্ছিক) for JavaScript and Typescript Developers from a purely technical(প্রযুক্তিগত) perspactive(পরিপ্রেক্ষিত). The JavaScript language doesn't have interfaces. 
    Angular can't see Typescript interfaces at runtime because they disappear(অদৃশ্য) from the transpiled Javascript.

    Fortunately(ভাগ্যক্রমে), they aren't necessary. You don't have to add the lifecycle hook interfaces to directives and components to benefit from the hooks themselves.

    Angular instead inspects(পরিদর্শন করা) directive and component classes and calls the hook methods if they are defined. Angular finds and calls methods like ngOnInit(), with or without the interfaces.

    Nonetheless(তবু, অথচ), it's good pracitce to add interfaces to TypeScript directive classes in order to benefite from strong typing and editor tooling

5. Other Angular lifecycle hooks

//29-05-2018----------------------------------
6. Lifecycle examples.

Demonstrates(প্রমান, স্পষ্ট করা)
a. peek-a-boo. (Demonstrates every lifecycle hook. Each hook method writes to the on-screen log);
b. spy (Directive have lifecycle hooks too. A SpyDirective can log when the element it spies upon is created or destroyed using the ngOnInit and ngOnDestroy hooks)
c. OnChanges.( See how Angular calls the ngOnChanges() hook with a changes object every time one of the component input properties changes. Shows how to interpret the changes object. ) 
d. DoCheck (Implements an ngDoCheck() method with custom change detection. See how often Angular calls this hook and watch it post changes to a log.)
e. AfterView (Shows what Angular means by a view. Demonstrates the ngAfterViewInit and ngAfterViewChecked hooks.)
f. AfteContent(Shows how to project external content into a component and how to distinguish projected content from a component's view children. Demonstrates the ngAfterContentInit and ngAfterContentChecked hooks.)
g. Counter (Demonstrates a combination of a component and a directive each with its own hooks.

In this example, a CounterComponent logs a change (via ngOnChanges) every time the parent component increments its input counter property. Meanwhile, the SpyDirective from the previous example is applied to the CounterComponent log where it watches log entries being created and destroyed.)


// 30-05-2018--------------------------
rarely(কদাচিৎ),
 if ever(যদি কখনো)
 expected(প্রত্যাশিত)
A. Peek-a-boo: all hooks
    The PeekABooComponent Demonstrates all of the hooks in one component. 

    You would rearly, If ever, implement all of the interfaces like this. The peek-a-boo exists to show how Angular calls the hooks in the expected order.

    The sequence of log messages follows the prescribed hook calling order: 
    OnChanges, 
    OnInit, 
    DoCheck(3x),
    AfterContentInit
    AfterContentChecked(3x),
    AfterViewInit,
    AfterViewChecked(3x)
    OnDestroy

    The constructor isn't an Angular hook per se. The log connfirms that input properties (the name property in this case) have no assigned values at constructor
// 31-05-2018--------------------

sneaky(গোপন)
spy(গুপ্তচর)
B. Spying(গোয়েন্দাগিরি) OnInit and OnDestroy


// 01-06-2018 -----------------------

Go undercover with these two spy hooks to discove when an element is initialize or destroyed.

This is the perfect infiltration(অনুপ্রবেশ)  job for a directive. The heroes will never know they're being watched. 

kidding aside(সরাইয়া সরাইয়া), pay attention to two key points:

    1. Angular calls hook methods for "Directives" as well as(পাশাপাশি) "Components".

    2. A spy Directive can provide insight(সূক্ষ্মদৃষ্টি) into a DOM object that you cannot change directly. Obviously you can't touch the implementation of a native <div>. You can't modify a third party component either. But you can watach both with a Directive.

The sneaky spy directive is simple, consisting almost entirely of ngOnInit() and ngOnDestroy() hooks that log messages to the parent via an injected LoggerService.

Each spy's birth and death marks the birth and death of the attached hero <div> with an entry in the "Hook Log" ans seen here...

C. OnInit 
    Use ngOnInit for two main reasons. 

    1. To perform complex initializations shortly and construction. 

    2. To set up the component after Angular sete the input propeties. 

Experienced developers agree that components should be cheap and safe to construct. 

Don't fatch data in a component constructor. You shouldn't worry that a new component will try to contact a remote server when created under test or befor you decide to display it. Constructors should do no more than set the initial local variables to simple values. 

*** An ngOnInit() is a good place for a component to fatch its inital data. 


D. OnDestroy 
    put cleanup(পরিষ্কার কর) logic in ngOnDestroy(), the logic that must run before Angular destroys the directive.

E. OnChanges()
    Angular call its ngOnChanges() method whenever it detects changes to input properties of the component or Directive. 


// 03-06-2018--------------------------
E. OnChanges()
Angular calls its ngOnChanges() method whenever it detectes changes to input properties of the Component or Directive

The ngOnChange() method takes an object that maps each chanded property name to a SimpleChanges object holding the current and previous property values. This hook iterates over the changed properties and logs them. 

    



