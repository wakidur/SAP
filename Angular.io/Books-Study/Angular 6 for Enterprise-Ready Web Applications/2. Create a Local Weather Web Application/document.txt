iterative (পুনরাবৃত্তিমূলক, পুনরাবৃত্ত)
nuances (সামান্য পার্থক্য, তারতম্য)
Leveraging (ওঠানামা)
Rough (মোটামুটি)
leveraging(উপজীব্য, জীবিকা, জীবনযাত্রা, জীবন, জীবিকানির্বাহের উপায়, উপজীবিকা, উপজীব্য)
differs(পৃথক)
admittedly(স্বীকার করিয়া লইয়া, নিঃসন্দেহে, স্পষ্টত)
convoluted(সংবর্ত, জটিল)
/**
 28-01-2019------------------
*/
Local Weather app 

2. Create a Local Weather Web Application
    Angular, 
    TypeScript, 
    Visual Studio Code, 
    Reactive Programming, 
    and RxJS.

30-01-2018 -------------- 

/****************** 25-04-2019 *******************/
    2.1	Introduction to Angular
       2.1.1.  Angular's philosophy
    2.2. What's new in Angular 6?
    2.3. Angular in Full-Stack Architecture
        2.3.1. High level architecture
            There are two types of decoupling, one is a 
             1. soft-decoupling.
                where essentially a Gentlemen's Agreement is made to not mix concerns and try and not mess up the code base. 
            
                *** If you maintain your frontend code under the same code structure as your backend code and if you let your REST server serve up your frontend application, then you are only practicing soft-decoupling.
            2. hard-decoupling 
                
/****************** 28-04-2019 *******************/
        2.3.2. Folder structure
            2.3.2.1. Set up your development directory
    2.4. Generate your Angular application
        2.4.1. Installing Angular CLI
        2.4.2. Initializing Angular app
        2.4.3. Publishing Git Repository using GitHub Desktop
        2.4.4. Inspecting and updating package.json
        2.4.5. Commiting code using VS Code
        2.4.6. Running your Angular app
    2.5. Optimizing VS Code for Angular
        2.5.1.IDE settings
        2.5.2. IDE extensions
        2.5.3. Coding style
    2.6. Planning a feature road map using Waffle
        2.6.1. Setting up a Waffle project
        2.6.2. Creating issues for your Local Weather app

/****************** 29-04-2019 *******************/
    2.7. Crafting UI elements using components and interfaces
        2.7.1. Adding an Angular component
            [An effective implementation of MVVM] inherently enforces proper separation of concerns. Business logic is clearly separated from presentation logic. So when a View is developed, it stays developed, because fixing a bug in one View's functionality doesn't impact other views. On the flip side, if [you use] visual inheritance effectively and [create] reusable user controls, fixing a bug in one place can fix issues throughout the application.


/****************** 30-04-2019 *******************/
        2.7.1. Adding an Angular component .....
        2.7.2. Define your model using interfaces
    
    2.8. Using Angular Services and HttpClient to retrieve data
        Now you need to connect your CurrentWeather component to the OpenWeatherMap APIs. In the upcoming sections, we will go over the following steps to accomplish this goal:
            1.	Create a new Angular Service
            2.	Import HttpClientModule and inject it into the service
            3.	Discover the OpenWeatherMap API
            
            4.	Create a new interface that conforms to the shape of the API
            5.	Write a get request
            6.	Inject the new service into the CurrentWeather component
            7.	Call the service from the init function of the CurrentWeather component
            8.	Finally, map the API data to the local ICurrentWeather type using RxJS functions so that it can be consumed by your component
        
        2.8.1. Creating a new Angular Service
        2.8.2. Inject dependencies
        2.8.3. Discover OpenWeatherMap APIs
        2.8.4. Storing environment variables

/****************** 05-05-2019 *******************/        
        2.8.5. Implementing an HTTP GET 
        2.8.6. Retrieving service data from a component
    
    2.9. Transform data using RxJS
        2.9.1. Understanding Reactive programming

/****************** 06-05-2019 *******************/   
    2.10. Summary   
