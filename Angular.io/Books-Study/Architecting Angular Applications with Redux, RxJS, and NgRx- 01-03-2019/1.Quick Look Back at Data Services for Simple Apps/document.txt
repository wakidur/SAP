underlying(ভিত্তিস্বরূপ, অবলম্বনস্বরুপ, নিম্নাবস্থিত)
constrain (বাধ্য করা, )
relevant (প্রাসঙ্গিক, সম্পর্কিত)
Cohesion (সংযোগ, সম্পর্ক, সূত্র, সংস্রব, সংলগ্নতা, অনুষঙ্গ, সংসক্তি, যুক্তিসিদ্ধ সম্বন্ধ, সংযোগ, সংযোগ-প্রবণতা)
cohesive (সংযোজক)
tedious (ক্লান্তিকর, ক্লান্তিজনক, অবসাদদায়ক, শ্রমসাধ্য)
facade (Synonyms(front show window dressing frontal) )(অট্টালিকার সদরের বহির্ভাগ, অট্টালিকাদির সংমুখভাগ)
belonging (একাত্মতার, অধিকারভুক্ত হত্তয়া, যুক্ত হত্তয়া )
belongs to (সম্পর্কিত, )
beyond (তার পরেও,)
construct(গড়া, গঠন করা, নির্মাণ করা) 
instance (উদাহরণ)
anew(নতুনভাবে, পুনরায়)
crawl (হামাগুড়ি, ধীরে ধীরে চলা)
attempt(চেষ্টা, প্রয়াস)
resolution(সমাধান)
express (প্রকাশ করা, দ্রুতগামী,স্পষ্ট)
persist(জিদ করা, অবিরত লাগিয়া থাকা,স্থায়ী অবস্থায় থাকা )
cumbersome (কষ্টকর, অসুবিধাজনক)

/****************** 01-03-2019 *******************/ 
1. Quick Look Back at Data Services for Simple Apps
    This book is about learning to structure your application and learning how to set up and communicate your application's state, and its changes, in a way that all parts of your application are in agreement on what is happening.

    The underlying architectural pattern for NgRx is Redux, which constrains data to live in only one place and ensures data is flowing in only one direction. 

    The Flux pattern has a lot in common with Redux and it is its shortcomings that led to Redux being created. NgRx itself is implemented using RxJS, which promotes a functional reactive style of programming. 


/****************** 02-03-2019 *******************/ 
    1.1.	Model-View-Controller – the pattern we all know
   


/****************** 03-03-2019 *******************/ 
        1.1.1.	Cohesion and coupling – establishing a common language
            Cohesion: Cohesion is about focus and what the class should do. 
            The lower the cohesion/connection/linkage, the more different thing are performed by a class and therfor it has no clear intention of what it should perform. 

            What about coupling? 
                Coupling is about how strongly connected a software element is to another software element. 

/****************** 04-03-2019 *******************/ 

        1.1.2.	Explaining the components of MVC
            1.1.2.1.	The model
            1.1.2.2.	The view
            1.1.2.3.	The controller
        1.1.3.	Interactions – the behavior between the components
        1.1.4.	MVC summary

    1.2.	An MVC flow in Angular
        1.2.1.	The model
        1.2.2.	The component – a controller and a building block
            In the context of MVC, the component is the V and C, the view and the controller. The component allows you to define either a separate template file or an inline template. The template is the view part.

            The controller in this context is a component class file that handles user interactions and also fetches the necessary data for the template to display.

            Components have come to be a central concept for a lot of frameworks that are popular today, such as React, Vue.js, and Polymer. 

            A component can take inputs, which are either data or methods. It consists of a piece of code and an HTML template, which render interesting data, living on the component. A component in Angular consists of three major parts:
                •	A decorator function
                •	A class
                •	A template
            
            A component consists of a controller class and a template. It can play two different roles in an Angular application: either it can be the responder to the route or it can serve as a building block. In the first case, Angular will instantiate it when a new route happens and respond with that component. In the latter case, the component is created directly by existing as a child component within another component.

                1.2.2.1.	 First responder to a route
                1.2.2.2.	Used as a building block

/****************** 05-03-2019 *******************/ 

                1.2.2.3. Components from an architectural standpoint

                @NgModule({
                    imports: [],
                    exports: [MyComponent],
                    declarations: [MyComponent, MyPipe],
                    providers: []
                })
        1.3.	Using ES2015 modules
            1.3.1.	Consuming a module
                1.3.1.1.	An Angular example
                1.3.1.2.	Multiple exports
                1.3.1.3.	The default import/export
                1.3.1.4.	 Renaming imports
            1.3.2.	The service
                Services can be of two types
                    1. Services without dependencies
                    2. Services with dependencies
                
                1.3.2.1.	Service without dependencies
                    A service without dependencies is a service whose constructor is empty:

                    export Sercice {
                        constructor() {}
                        getData() {}
                    }
                To use it, you simply type:
                import { Service } from './service'
                let service = new Service();
                service.getData();


                class Service {
                    constructor() {}
                    getData() {}
                }
                const service = new Service();
                export default service;


                1.3.2.2.	 Service with dependencies

                
/****************** 06-03-2019 *******************/ 

        1.4.	Dependency Injection
            A DI system can act in one of two ways when asked to resolve an instance:
                •	Transient mode: The dependency is always created anew
                •	Singleton mode: The dependency is reused


                Angular only creates singletons though which means every time we ask for a dependency it will only be created once and we will be given an already existing dependency if we are not the first construct to ask for that dependency.

                The default behavior of any DI framework is to use the default constructor on a class and create an instance from a class. 

                The DI framework would crawl the chain of dependencies, find the construct that does not have any dependencies, and instantiate that first. 
                Then it would crawl upwards and finally resolve the construct you asked for.

            1.4.1.	Dependency Injection in Angular using providers
                We can see here that adding our Service to a component's providers array has limitations. Adding it to an Angular module is the sure way to ensure it can be resolved by all constructs residing inside of that array. This is not all though. Adding our Service to an Angular module's providers array ensures it is accessible throughout our entire application.

                So the rule of thumb here is if you want to expose a service to your application, then put it in the Angular module's providers array. If you want to limit access to the service, then place it into a component's providers array. Then, you will ensure it can only be reached by that component and its view children.
            
            1.4.2.	Overriding an existing construct
                 There are cases when you want to override the default resolution of your construct. You can do so at the module level, but also at the component level. 

                 @Component({
                        providers: [
                            { 
                                provide: Service, 
                                useClass : FakeService 
                            }
                        ]
                    })

                1.4.2.1.	Overriding at runtime
                1.4.2.2.	Overriding constants
                1.4.2.3.	Resolving your dependencies with @Injectable

        1.5.	Fetching and persisting data with HTTP – introducing services with Observables
            1.5.1.	Fetching data with the HTTP service
                   




