/****************** 10-03-2019 *******************/ 
predict (ভবিষ্যদ্বাণী করা, গণনা করা)
predictable(আন্দাজের)
stress (জোর, কঠিন চাপ)
arrival (উপস্থিতি)
emerging (উদীয়মান, উঠতি, উত্থিত, উঠন্ত, বর্ধনশীল, ঊর্ধ্বগামী)
tabulation (ছককাটা তালিকাভুক্ত করণ)
tabbed  (ট্যাবযুক্ত স্থির করা)
shallow (অগভীর স্থান, অগভীর)
cognitive (জ্ঞান সম্বন্ধীয়)
stretching (প্রসারিত)
straight (সোজা, সরাসরিভাবে)
 away
2.	Asynchronous Programming
    To learn what asynchronous conde is, let's first conver what synchronous code is.

    Synchornous: With synchronous code, you have one statement being executed after another.
    the code is predictable; you know what happens  and when.

    print('a'); 
    print('b'); 
    print('c'); 

    // Output
    a, b, c;

    Asynchronous: With asynchronous code you lose all the nice predictability that the synchronous code offers. In fact, there is very little you know about asynchronous code other than that it finishes executing, eventually. 

    asyncPrint('a')
    asyncPrint('b')
    asyncPrint('c')

    // output
    c, b, a

    As you can see, the order in which a statement finishes is not determined by when a statement occurs in the code. Instead, there is a time element involved that decides when a statement has run its course.




    Asynchronous code runs in an event loop. 
    This means that async code runs in the following order: 
        1. Run async code 
        1. Wait for the response to be ready, then fire an interrupt
        1. Run the event handler

    An important thing to stress here is that async code is non-blocking.
    other operations can take place while async code is running.

    Therefore, async code is a good candidate to be used when dealing with 
    I/O, 
    long-running tasks, and 
    network requests.

/****************** 11-03-2019 *******************/ 

    3.1. The callback pattern
        An operating system deals with asynchronous code by thinking of it in terms of the following concepts:
        •	Events, these are messages that signals to the operating system that a certain type of action has occurred
        •	Event handler, this is the piece of code that should run when an event has occurred
        •	Event queue, this is where all events and their event handlers are placed, waiting to be executed


/****************** 12-03-2019 *******************/
        3.1.1. The callback pattern on the web

            As the web is single-threaded

/****************** 13-03-2019 *******************/
        3.1.2. The callback pattern in Node.js
            Node.js is single-threaded just like the web.
    
    3.2. Problems with structuring async code – callback hell

/****************** 14-03-2019 *******************/
    3.3. Promises
        The idea of a Promise is to flatten out async code. 
        A promise is said to have the following states:

        •	Pending: This means it has not yet been decided or that the data is not available yet
        •	Fulfilled: The data has come back
        •	Rejected: An error happened during the operation
        
        3.3.1. Thenables
            3.3.1.1. Handling rejected promises
