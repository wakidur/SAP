/*
* 14-10-2018 ------------
*/

5. Supporting Server Data Persistence
    5.1. Angular and server interactions
        5.1.1. Setting up the persistence store
        5.1.2. Seeding the database
    5.2. The basics of the HTTPClient module
    5.3. Personal Trainer and server integration
        5.3.1. Loading exercise and workout data
        5.3.2. Loading exercise and workout lists from a server
            5.3.2.1. Adding the HTTPClient module and RxJS to our project
            5.3.2.2. Updating workout-service to use the HTTPClient module and RxJS
            5.3.2.3. Modifying getWorkouts () to use the HTTPClient module
        5.3.3. Updating the workout/exercise list pages
        5.3.4. Mapping server data to application models
/*
* 15-10-2018 ------------
*/
        5.3.5. Loading exercise and workout data from the server
        5.3.6. Fixing the builder services
        5.3.7. Updating the resolvers
        5.3.8. Fixing the Workout and Exercise components

/*
* 22-10-2018 ------------
*/
    5.4. Performing CRUD on exercises/workouts
        5.4.1. Creating a new workout
        5.4.2. Updating a workout
        5.4.3. Deleting a workout
        5.4.4. Fixing the upstream code
    
    5.5. Using promises for HTTP requests
    5.6. The async pipe
    5.7. Cross-domain access and Angular
        5.7.1. Using JSONP to make cross-domain requests
        5.7.2. Cross-origin resource sharing
    5.8. Handling workouts not found
    5.9. Fixing the 7 Minute Workout app
        

