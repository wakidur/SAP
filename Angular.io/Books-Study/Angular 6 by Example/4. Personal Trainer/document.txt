/**** 30-09-2018------------------------------*/
4.	Personal Trainer
    Angular form support 
    client-server communication

    •	Defining Personal Trainer requirements:
    •	Defining the Personal Trainer model
    •	Defining the Personal Trainer layout and navigat
    •	Adding support pages
    •	Defining the Workout Builder component structure: 
    •	Building forms
        •	Form types: 
        •	ngModel: 
        •	Reactive Form Controls
        •	Data formatting
        •	Input validation: 

    4.1. The Personal Trainer app - the problem scope
    4.2. Personal Trainer requirements
        Based on the notion of managing workouts and exercises, these are some of the requirements that our Personal Trainer app should fulfill:

            •	The ability to list all available workouts.
            •	The ability to create and edit a workout. While creating and editing a workout, it should have:
                •	The ability to add workout attributes including name, title, description, and rest duration
                •	The ability to add/remove multiple exercises for workouts
                •	The ability to order exercises in the workout
                •	The ability to save workout data

            •	The ability to list all available exercises.
            •	The ability to create and edit an exercise. While creating and editing an exercise, it should have:
                •	The ability to add exercise attributes such as name, title, description, and procedure
                •	The ability to add pictures for the exercise
                •	The ability to add related videos for the exercise
                •	The ability to add audio clues for the exercise
    
    4.3. The Personal Trainer model
    4.4. Getting started with the code for Personal Trainer
    4.5. Using the Personal Trainer model in Workout Builder services
    4.6. The Personal Trainer layout
    4.7. Personal Trainer navigation with routes

        Route
            /builder
            /builder/workouts
            /builder/workout/new
            /builder/workout/:id
            /builder/exercises
            /builder/exercise/new
            /builder/exercise/:id
        
        4.7.1. Getting started with Personal Trainer navigation
        4.7.2. Introducing child routes to Workout Builder
        4.7.3. Adding the child routing component
        4.7.4. Updating the WorkoutBuilder component
        4.7.5. Updating the Workout Builder module
        4.7.6. Updating App Routing module
        4.7.7. Putting it all together

// 01-10-2018------------------------------------
        4.7.8. Lazy loading of routes
            Lazy loading allows us to employ an asynchronous approach when loading our modules.

            If you think of our application as a Single Page Application (SPA). 
            In order to avoid round trips to the server, an SPA will typically load all the resources that will be needed to use the application when it is first started up by a user. 

            But in our case, the important point is that we do not need the Workout Builder when the application is first loaded. 
            Instead, we would like to load those resources only when the user decides that they want to add or change a workout or exercise.

            Child and asynchronous routing make it straightforward to implement applications that allow us to have our cake and eat it too. On one hand, we can build SPAs with powerful client-side navigation, while on the other hand we can also encapsulate features in separate child routing components and load them only on demand.
        4.7.9. Integrating sub- and side-level navigation
            4.7.9.1. Sub-level navigation
            4.7.9.2. Side navigation

    4.8. Implementing workout and exercise lists

        4.8.1. WorkoutService as a workout and exercise repository

            The plan here is to create a WorkoutService instance that is responsible for exposing the exercise and workout data across the two applications. 
            The main responsibilities of the service include

            •	Exercise-related CRUD operations: Get all exercises, get a specific exercise based on its name, create an exercise, update an exercise, and delete it

            •	Workout-related CRUD operations: These are similar to the exercise-related operations, but targeted toward the workout entity

            4.8.2. Workout and exercise list components
            4.8.3. Workout and exercise list views




            







