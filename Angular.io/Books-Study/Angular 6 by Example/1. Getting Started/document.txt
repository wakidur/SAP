irrespective(নিরপেক্ষ, 	নির্বিশেষ)
digging(খনক)
delve (গভীরভাবে অনুসন্ধান করা)
fragment (টুকরা)
1. Getting Started

    1.1 Angular basics

// 28-08-2018------------------    
    1.2 The customary Hello Angular app &#x2013; Guess the Number!
        1.2.1 Building Guess the Number!
            The standard practice while building user interfaces(UI) is to build them top-down. Start by designing the UI and then plug in the data and behavior according to your needs. With such an approach, the UI, data, and behavioral aspects of the app are all tightly coupled, which is a less than ideal situation!

            With component-based design, we work differently. 
            We start by looking at the UI and expected behavior, and then we encapsulate all of this into a building block that we call a component.
            This component is then hosted on our page. Within the component, we separate the 
                UI into a View
                behavior into a class
            with the appropriate properties and methods needed to support the behavior.

        1.2.2 Designing our first component
            To determine what needs to go into our component, we will start by detailing the features that we want the app to support
                a. Generating random numbers(original)
                b. Providing input for a user to guess the value(guess)
                c. Tracking the number of guesses already made(noOfTries)
                d. Giving the user hints to improve their guess based on their input(deviation)
                e. Giving a success message if the user guesses the number correctly(deviation)


                *** While building any app, we urge you to first think about the functionality you want to offer, and then the data and behavior that can support the functionality. Lastly, think about how to build a user interface for it. This is a good practice irrespective of the library or framework that you use to build your app.

// 29-08-2018 ------------------------

            1.2.3.1 Installing Bootstrap
// 30-08-2018 -------------------------
        1.2.4. What do we have so far?
        1.2.5 The host file - index.html
        1.2.6. The component file
            1.2.6.1. The import statement
            1.2.6.2. Decorator
            1.2.6.3. Defining the class
03-09-2018 ---------------------------
        1.2.7 The module file
        1.2.8  Bootstrapping
        1.2.9 We're up and running!
// 04-09-2018 -----------------------
	1.3. Digging deeper
	
		In the angular words, these symble mean the following
			a. {{ expression }} are Interpolation symbole
			b. [] represents property bindings
			c. () represents event bindings
			d. (?.) safe navigation operator {{customer?.firstName}}
			
			clearly, these symble have some behavior attached to them and seem to be linking the view HTML and component code.
			
		1.3.1. Interpolation
		1.3.2. Tracking changes in the number of tries
		1.3.3. Expressions
			1.3.3.1. The safe navigation operator
		1.3.4. Data binding
			1.3.4.1. Property binding
				<input type="number" [value]="guess" (input)="guess = $event.target.value" />
			1.3.4.2. Event binding
		1.3.5. Structural directives
			
	1.4. Revisiting our app		
		Angular differs from other template frameworks, in that these bindings between a component and its view are live. Changes made to the properties of the component updat the view. Angular never regenerate the HTML, it just works on the relevent part of the HTML and updates only the HTML element that need to change as component properites change. This data binding capability makes Angular an exceptional view templating enging too. 
		
		Looking at how our code handles updates	
			
			
			
			
			
			
			
			
			
			
			