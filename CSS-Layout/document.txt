A CSS layout mode, sometimes simply called layout, is an algorithm that determines the position and size of boxes based on the way they interact with their sibling and ancestor boxes. There are several of them:

1. The block layout
2. The inline layout
3. The table layout,
4. The positioned layout
5. The flexible box layout
6. The grid layout


/*===================A Complete Guide to Flexbox==========================*/
https://css-tricks.com/snippets/css/a-guide-to-flexbox/
========================Properties for the Parent======================
            ------------flex container------------------
1.display
    1.1 display: flex; /* or inline-flex */
2.flex-direction
    2.1 flex-direction: row | row-reverse | column | column-reverse;
        2.1.1 row (default): left to right in ltr; right to left in rtl
        2.1.2 row-reverse: right to left in ltr; left to right in rtl
        2.1.3 column: same as row but top to bottom
        2.1.4 column-reverse: same as row-reverse but bottom to top
3.flex-wrap
    3.1 flex-wrap: nowrap | wrap | wrap-reverse;
        3.1.1 nowrap (default): all flex items will be on one line
        3.1.2 wrap: flex items will wrap onto multiple lines, from top to bottom.
        3.1.3 wrap-reverse: flex items will wrap onto multiple lines from bottom to top.
4.flex-flow
    flex-flow: <‘flex-direction’> || <‘flex-wrap’> Default is row | nowrap.
5.justify-content
    5.1. justify-content: flex-start | flex-end | center | space-between | space-around | space-evenly;
        5.1.1 flex-start (default): items are packed toward the start line
        5.1.2 flex-end: items are packed toward to end line
        5.1.3 center: items are centered along the line
        5.1.4 space-between: items are evenly distributed in the line; first item is on the start line, last item on the end line
        5.1.5 space-around: items are evenly distributed in the line with equal space around them. 
        5.1.6 space-evenly: items are distributed so that the spacing between any two items (and the space to the edges) is equal.

6.align-items
    6.1 align-items: flex-start | flex-end | center | baseline | stretch;
        6.1.1 flex-start: cross-start margin edge of the items is placed on the cross-start line
        6.1.2 flex-end: cross-end margin edge of the items is placed on the cross-end line
        6.1.3 center: items are centered in the cross-axis
        6.1.4 baseline: items are aligned such as their baselines align
        6.1.5 stretch (default): stretch to fill the container (still respect min-width/max-width)

7.align-content
    7.1 align-content: flex-start | flex-end | center | space-between | space-around | stretch;
        7.1.1 flex-start: lines packed to the start of the container
        7.1.2 flex-end: lines packed to the end of the container
        7.1.3 center: lines packed to the center of the container
        7.1.4 space-between: lines evenly distributed; the first line is at the start of the container while the last one is at the end
        7.1.5 space-around: lines evenly distributed with equal space around each line
        7.1.6 stretch (default): lines stretch to take up the remaining space
       
========================Properties for the Children====================
           -------------flex items---------------------

1.order  
    order: <integer>; /* default is 0 */
2.flex-grow   
    flex-grow: <number>; /* default 0 */
3.flex-shrink  
    flex-shrink: <number>; /* default 1 */
4.flex-basis 
    flex-basis: <length> | auto; /* default auto */
5.flex
    flex: none | [ <'flex-grow'> <'flex-shrink'>? || <'flex-basis'> ] Default is 0 1 auto.
6.align-self
    align-self: auto | flex-start | flex-end | center | baseline | stretch;

