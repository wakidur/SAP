https://github.com/lukehoban/es6features#arrows
https://hacks.mozilla.org/2015/06/es6-in-depth-arrow-functions/
https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions
https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map

Arrows are a function shorthand using the " => " syntax. They are syntactically(চিহ্নগুলি সিন্টেক্সের) similar to the related feature in C#, Java 8 and CoffeeScript. They support both 
1. statement block bodies 
    as well as (পাশাপাশি  )
2. expression bodies which return the value of the expression.
3. Unlike functions,arrows share the same lexical(আভিধানিক) this as their surrounding code

Descripting: -----------
Two factors(কারণের) influence(প্রভাবিত) the introduction(ভূমিকা) of arraow function.
    1. Shorter Functions
    2. non-binding(অ বাঁধাই) of This

No separate this---------
Until(পর্যন্ত) arrow functions, every new function defined its own this value (a new object in the case of a constructor, undefined in strict mode function calls, the base object if the function is called as an "object method", etc.). This proved to be less than ideal with an object-oriented style of programming.


In ECMAScript 3/5, the this issue was fixable by assigning the value in this to a variable that could be closed over.

06-02-2018---------------------
// Relation with strict mode
Given that this comes from the surrounding lexical context, strict mode rules with regard to this are ignored.
// Invoked through call or apply
Since arrow functions do not have their own this, the methods call() or apply() can only pass(অতিক্রম করা) in parameters. thisArg is ignored.

No binding of arguments
Arrow functions do not have their own arguments object. Thus, in this example, arguments is simply a reference to the the arguments of the enclosing scope: