https://www.techaspect.com/careers/apply-now/


Hi all, I recently co-authored a web development book. Today and tomorrow, I'd like to offer a free copy to members of this group.

The book teaches you how to build a JavaScript web app from scratch (with React, Material-UI, Next, Express, Mongoose, MongoDB) and integrate it with third party APIs (Google, Github, AWS SES, Mailchimp, Stripe).

More about the book: https://builderbook.org/book

Introduction chapter: https://builderbook.org/books/builder-book/introduction

Final app you build: https://github.com/builderbook/builderbook

If you're interested, please send me an email at team@builderbook.org by Tuesday, March 20. Mention this post the in the JavaScript group. I'd also love to hear why you're interested or how you think the book will help you
//-----------18-03-2018------------
/****** Express Tutorial: The Local Library website *******************/
1. Overview
2. The LocalLibrary website
3. I'm stuck, where can I get the source?

Route Detail
BuyerBankInfo
/***** Express Tutorial Part 2: Creating a skeleton website **********/
    skeleton - (কঙ্কাল);
    site-specific(সাইট নির্দিষ্ট)
	irritating (বিরক্তিকর)
    1. Overview 
    2. Using the application generator
        => npm install express-generator -g
        => express --help
        => express --view=hbs --css=sass
        => express --view=hbs 
        => cd. && npm install
        => SET DEBUG=appsName:* & npm start

        2.1 What view engine should I use?
        2.2 What CSS stylesheet engine should I use?
    3. Creating the project
		=> express express-locallibrary --veiw=bhs
		=> cd express express-locallibrary && npm install
		=> SET DEBUG=express-locallibrary:* & npm start
    4. Running the skeleton website
		=> cd express-locallibrary
		=> npm install
		=> SET DEBUG=express-locallibrary:* & npm install
	
//19-03-2018
	5. Enable server restart on file changes
		=> npm install --save-dev nodemon
		
		=> "script" { "start" : "node ./bin/www", "devstart": "nodemon ./bin/www"}
		
		=> SET DEBUG=express-locallibrary:* & npm run devstart
	
	6.	The generated project
		6.1 Directory structure
		6.2 package.json
		6.3 www file
			The file /bin/www is the application entry point! The very 
		6.4 app.js
			express, server-favicon, morgan, cookie-parser
			Which is a core Node library for parsing file and directory paths.
		6.5 Routes	
		6.7 Views (templates)

// 20-03-2018 
/***** Express Tutorial Part 3: Using a Database (with Mongoose) **********/

	1. Overview : Library staff will use the Local Library website to store information about books and borrowers(ঋণ গ্রহীতাদের), while library members will use it to browse it to browse and search for books, find out whether there are any copies available, and reserve or borrow(ধার করা) them. In order to store and retrieve information efficiently, we will store it in a Database

	1.1. What databases can I use?
		Express apps can use any databases supported by Node( Express itself doesn't define any specific additional behaviour/requirements for database management). There are many popular options, including 
			a. PostgreSQL
			b. MySQL 
			c. Redis
			d. SQLite
			e. MongoDB
		When choosing a database, you should consider things like 
			a. time-to-productivity
			b. learning curve
			c. performance
			d. easy of replication
			e. easy backup
			f. cost 
			g. community support

	1.2. What is the best way to interact(পরস্পরের উপর ক্রিয়া করা) with a database?
		
		There are two approaches for interacting with database
			1. Using the databases native query language ( SQL )
			2. Using an Object Data Model (ODM)/ Object Relational Model

				** The vary best performance can be gained by using SQL
				** ODM are often slower because they use translation code to map between object and database format, which may not use the most efficient database queries
				** The benefit of using an ORM is that programmers can continue to think in terms of JavaScript object rether thean database semantics
			
	1.3  What ORM/ODM should I use?
		There are many ODM/ORM solutions available on the NPM package manager site
		A few solutions that were popular at the time of writing 

			a. Mongoose : Mongoose is a MongoDB object modeling tool designed to work in an asynchronous enviroment.
			b. Waterline : An ORM extracted form the Express-based Sails web framework. It provides a uniform API for accessing numberours different databases, including 
				b.a Redis
				b.b MySQL
				b.c LDAP
				b.d MongoDB
				b.e Postgres
			c. Bookshelf: Features both promise-based and traditonal callback interfaces, provideing transcation support, eager/nested-eager 
				relation loading, polymorphic associations, and support for one-to-one, one-to-many, and many-to-many relations. works with 
				c.a PostgreSQL
				c.b MySQL
				c.c SQLLite3
			d. Objection: Makes it as easy as possible to use the full power of SQL and the underlying database engine supports 
				d.a SQLite3, 
				d.b Postgres, 
			 	d.c MySQL
			e. Squelize: is a promise-based ORM for node.js and io.js. It supports the dialects 
				e.a PostgreSQL
				e.b MySQL
				e.c MariaDB
				e.d SQLite
				e.e MSSQL
//21-03-2018
	1.4 Using Mongoose and MongoDb for the LocalLibrary.


	2.Designing the LocalLibrary models(মডেল)
		worth (মূল্য)
		It's worth taking a few minutes to think about data we need to store and the relationships between the different object.
		
		Once we've decided on our models and fields, we need to think about the relationships between them.
		
		Book : 	the generic details of the book
		BookInstance   : status of specific physical copies of the book available in the system
		Author : 
		Genre : 
		
		var Author = {
			first_name : String,
			family_name: string,
			date_of_brith: Date,
			date_of_death: Date,
			name : String,
			lifespan: String,
			url: String
		}
		
		var Genre = {
			name : String,
			url: string
		}
		
		
		var Book = {
		   title: string,
		   author: Author[1],
		   summary : String,
		   ISBN : string
		   genre: Gener[0..*],
		   url: String
		}
		
		var BookInstance = {
			book: Book,
			imprint : String,
			status: enum,
			due_back: Date,
			url: String
		}
	https://www.youtube.com/watch?v=1Wkd8WNdlmY	
	
	3. Mongoose primer	
		This section provides an overview of how to connect Mongoose to a MongoDB database, how to define a schema(পরিকল্পনা, তথ্যকোষ বা ডেটাবেসের একটি ডেটা মডেল) and model, and how to make basic queries.
		
		3.1 Installing Mongoose and MongoDB
		3.2 Connecting to MongoDB
		3.3 Defining and creating models
		
		
		
		
    




