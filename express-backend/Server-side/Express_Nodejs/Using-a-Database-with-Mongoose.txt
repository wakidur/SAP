/***** Express Tutorial Part 3: Using a Database (with Mongoose) **********/
//====> second revision 16-5-2018
1. Overview : Library staff will use the Local Library website to store information about books and borrowers(ঋণ গ্রহীতাদের), while library members will use it to browse it to browse and search for books, find out whether there are any copies available, and reserve or borrow(ধার করা) them. In order to store and retrieve information efficiently, we will store it in a Database

	1.1. What databases can I use?
		Express apps can use any databases supported by Node( Express itself doesn't define any specific additional behaviour/requirements for database management). There are many popular options, including 
			a. PostgreSQL
			b. MySQL 
			c. Redis
			d. SQLite
			e. MongoDB
		When choosing a database, you should consider things like 
			a. time-to-productivity
			b. learning curve
			c. performance
			d. easy of replication
			e. easy backup
			f. cost 
			g. community support

	1.2. What is the best way to interact(পরস্পরের উপর ক্রিয়া করা) with a database?
		
		There are two approaches for interacting with database
			1. Using the databases native query language ( SQL )
			2. Using an Object Data Model (ODM)/ Object Relational Model
                An ODM/ORM represents the website's data as JavaScript objects, which are then mapped to the underlying database. 

				** The vary best performance can be gained by using SQL, or whatever query language is suppoerted by the database.
				** ODM's are often slower because they use translation(অনুবাদ, স্থানান্তরণ) code to map between object and database format, which may not use the most efficient(কার্যকর) database queries
				** The benefit of using an ORM is that programmers can continue to think in terms of JavaScript object rether thean database semantics(শব্দার্থবিদ্যা)
			
	1.3  What ORM/ODM should I use?
		There are many ODM/ORM solutions available on the NPM package manager site
		A few solutions that were popular at the time of writing 

			a. Mongoose : Mongoose is a MongoDB object modeling tool designed to work in an asynchronous enviroment.
			b. Waterline : An ORM extracted form the Express-based Sails web framework. It provides a uniform API for accessing numberours different databases, including 
				b.a Redis
				b.b MySQL
				b.c LDAP
				b.d MongoDB
				b.e Postgres
			c. Bookshelf: Features both promise-based and traditonal callback interfaces, provideing transcation support, eager/nested-eager 
				relation loading, polymorphic associations, and support for one-to-one, one-to-many, and many-to-many relations. works with 
				c.a PostgreSQL
				c.b MySQL
				c.c SQLLite3
			d. Objection: Makes it as easy as possible to use the full power of SQL and the underlying database engine supports 
				d.a SQLite3, 
				d.b Postgres, 
			 	d.c MySQL
			e. Squelize: is a promise-based ORM for node.js and io.js. It supports the dialects 
				e.a PostgreSQL
				e.b MySQL
				e.c MariaDB
				e.d SQLite
				e.e MSSQL
            
        As a general rule you should consider both the features provided and the "community activity" (downloads, contributions, bug repoets, quality fo documentation etc.) when selecting a solution. At time of writing Mongoose is by far the most (সবচেয়ে পর্যন্ত) popular ORM, and is a reasonable choice if your're using MongoDB for your database.
//21-03-2018
	1.4 Using Mongoose and MongoDb for the LocalLibrary.
        For the Local Library example (and the rest of this topic) we're going to use the Mongoose ODM to access our library data. Mongoose acts as a front end to MongoDB, an open source NoSQL database that uses a document-oriented data model. A “collection” of “documents”, in a MongoDB database, is analogous to a “table” of “rows” in a relational database.

        This ODM and database combination is extremely popular in the Node community, partially because the document storage and query system looks very much like JSON, and is hence familiar to JavaScript developers.


	2. Designing the LocalLibrary models(মডেল)
		
		worth (মূল্য)
		It's worth taking a few minutes to think about data we need to store and the relationships between the different object.
		
		Once we've decided on our models and fields, we need to think about the relationships between them.
		
		Book : 	the generic details of the book
		BookInstance   : status of specific physical copies of the book available in the system
		Author : 
		Genre : 
		
		var Author = {
			first_name : String,
			family_name: string,
			date_of_brith: Date,
			date_of_death: Date,
			name : String,
			lifespan: String,
			url: String
		}
		
		var Genre = {
			name : String,
			url: string
		}
		
		
		var Book = {
		   title: string,
		   author: Author[1],
		   summary : String,
		   ISBN : string
		   genre: Gener[0..*],
		   url: String
		}
		
		var BookInstance = {
			book: Book,
			imprint : String,
			status: enum,
			due_back: Date,
			url: String
		}
	
	
	3. Mongoose primer	
	//====> second revision 17-5-2018
		This section provides an overview of how to connect Mongoose to a MongoDB database, how to define a schema(পরিকল্পনা, তথ্যকোষ বা ডেটাবেসের একটি ডেটা মডেল) and model, and how to make basic queries.
		
		3.1 Installing Mongoose and MongoDB
		3.2 Connecting to MongoDB
		3.3 Defining and creating models 
			Models are defined using the Schema interface. The Schema allows you to define the fields stored in each document along with their validation requirements and default values. you can define static and instance helper methods to make it easier to work with your data type, and alos virtual properties that you can use like any other field, but which aren't actually stored in the database

			Schemas are then "Compiled" into models using the mongoose.model() method. Once you have a model you can use it to 
				find,
				creat,
				update,
				delete
				object of the given type.

			Note: Each model maps to a "collection of documents" in the MongoDB database. The documents will the fields/schema types defined in the model Schema.

			3.3.1 Defining schemas
			3.3.2 Creating a model
				var SomeModel = mongoose.model('SomeModel', SomeNewModelSchema) ;

				The first argument is the singular name of the collection that will be created for your model(Mongoose will create the database collection for the above model SomeMode), and the socond argument is the schema you want to use in creating the model.

				Note: One you've defined your model classes you can use them to create, update, or delete, and to run queries to get all records or particulat
				subsets of records. 
			3.3.3 Schema types (fields)
				The schema can have an arbitrary(অবাধ, মুক্ত, স্বাধীন) number of fields -- each one represents(প্রতিনিধিত্ব করে)  a field on the documents stored in MongoDB. 
			3.3.4 Validation
			3.3.5 Virtual properties

//27-03-2018	

			3.3.6 Methods and query helpers	
				A schema can also have "instance methods", "static methods" and "query helpers". The instance  and static methods are similar, but with the obvious(সুস্পষ্ট)  difference  that an instance method is associated(যুক্ত) with a particular recode and has access to the current object. Query helpers allows you to extend mongoose's chainable query builder API( for example, alowing you to add a query "byName" in addition to the find(), findOne() and findById() methods)
					3.3.6.1 Using models 
						Once you've created a schema you  can use it to create modeles. The model represents a collection fo documetns in the database that you can search, while the model's instances represent individual documents that you can save and retrieve.
						
			3.3.7 Creating and modifying documents: 
				=> Every model has an associated(যুক্ত) connection (this will be the default connection when you use mongoose.model()). you create a new connection and call .mondel() on it to create the documents on a different database;

			28-03-2018

			3.3.8 Searching for records 
				you can search for recodes using query methods, specifying the query condition as JSON document.

				Note: All callbacks in Mongoose use the pattern callback(error, result). if an error occurs executing the query, the error parameter will contain an error document, and result will be null. If the query is successful, the error parameter will be null, and the result will be populated with the results of the query.



				Some methods
				.find()
				.where();
				.equals();
				.gt();
				.lt();
				.limit();
				.sort();
				.select();
				.exec();

				.findById();
				.findOne();
				.findByIdAndRemove();
				.findByIdAndUpdate();
				.findOneAndRemove();
				.findOneAndUpdate();
				.count();

				Note: There is also a count() method that you canuse to get the number of items that match conditions. Thes is usefull if you want to perform a count without actually fatching the records.

			3.3.9 Working with related documents — population
				You can create reference(উল্লেখ, প্রসঙ্গ) form one document/model instance to amother using the ObjectId sechma field, or from one document to many using and array of ObjectIds. The field stores  id of the related model. if you need the actual content of the associated document, you can use the populate() methods in a query to replace the id with the actual data.

				For example, The following schema defines authors and stories(গল্প). Each author can have multiple stories, which we represent as an array of ObjectId. Each story can have a single author. the 'ref' (hightlighted in bold below) tells the schema which model can be assigned to this field.

				We can save out reference to the related document by assigning the _id value. 

29-03-2018
			3.3.10 One schema/model per file
			While you can create schemas and models using any file structure you like, we highly recommend defining each model schema in its own module(file), exporting the method to create the model.




		4. Setting up the MongoDB database
		5. Install Mongoose
		6. Connect to MongoDB
		7. Defining the LocalLibrary Schema
			/models
				author.js
				book.js
				bookinstance.js
				genre.js
				