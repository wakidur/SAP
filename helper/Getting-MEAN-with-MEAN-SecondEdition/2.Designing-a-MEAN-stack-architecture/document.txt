// 28-06-2018 -------------
encounter (সাক্ষাৎ)
diverse range of problems (বিভিন্ন ধরণের সমস্যার)
manner(পদ্ধতি, রকম)
crawl (হামাগুড়ি)
2 Designing a MEAN stack architecture
    This chapter covers
        1. Introducing a common MEAN stack architecture
        2. Considerations for single-page applications
        3. Discovering alternative MEAN stack architectures
        4. Designing an architecture for a real application
        5. Planning a build based on the architecture design
feed(ভোজন)
feeding(প্রতিপালন, চারণভূমি, ভক্ষক, ভোজ্য সামগ্রী)
    2.1   A common MEAN stack architecture

            representational state transfer (REST) 
            API
            single-page application (SPA)
            The API is typically built with MongoDB, Express, and Node.js, 
            with the SPA being built in Angular. 

        A common way to architect a MEAN stack application is to have a representational state transfer (REST) API feeding a single-page application (SPA).

        The API is typically built with MongoDB, Express, and Node.js, with the SPA being built in Angular. 

// 30-06-2018 ------------- (9.00AM) 

    WHAT IS A REST API?
        REST stands for REpresentational State Transfer, Which is an architectureal style rather than a strict protocol. REST is stateless -- it has no idea of any current user state or history.

        API is an abbreviation for application program interface, which enables applications to talk to each other. In the case of the web, an API is normally a set of URLs that respond with data when called in the correct manner wtih the correct information. 

        REST API is a stateless inerface to your application. In the case of the MEAN Stack, the REST API is used to create a stateless interface to your database, enabling a way for other applications - for example an Angular SPA - to work with the data. In other words, you create a collection of structured URLs that will return specific data when called. 

    2.2   Looking beyond SPAs
        2.2.1   Hard to crawl
            Making an SPA crawlable
            Does it matter?
        2.2.2   Analytics and browser history
            Adding page loads to an SPA
            Is it a major problem?
        2.2.3   Speed of initial load
            Speeding up the page load
            Should you care about speed?
        
        2.2.4   To SPA or not to SPA?
            The three points about 
            crawlability, 
            analytics integration, and 
            page load speed 
        
    2.3   Designing a flexible MEAN architecture
        2.3.1   Requirements for a blog engine
        2.3.2   A blog engine architecture
            Admin interface: An Angular SPA
            Blog entries: What to do?
            Blog entries: Making good use of Express
            Blog entries: Using more of the stack
            Blog engine: A hybrid architecture
        2.3.3   Best practice: Build an internal API for a data layer



